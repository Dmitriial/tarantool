test_run = require('test_run').new()
---
...
SERVERS = {'trim1', 'trim2', 'trim3', 'trim4'}
---
...
-- Deploy cluster
test_run:create_cluster(SERVERS, "replication", {args="0.1"})
---
...
test_run:wait_fullmesh(SERVERS)
---
...
test_run:cmd('switch trim1')
---
- true
...
box.space._cluster:len() == 4
---
- true
...
-- errors
replicaset_list_wasted()
---
- error: 'builtin/box/ctl.lua:27: replication_dead_gap and replication_rw_gap must
    be set'
...
replica_displace()
---
- error: 'builtin/box/ctl.lua:43: Usage: replica_displace([uuid])'
...
-- set dead/rw gap
box.cfg{replication_dead_gap = 0.001, replication_rw_gap = 10}
---
...
-- stop replication
test_run:cmd('switch trim4')
---
- true
...
replication = box.cfg.replication
---
...
box.cfg{replication = {}}
---
...
test_run:cmd('switch trim1')
---
- true
...
-- must be empty
table.getn(replicaset_list_wasted()) == 0
---
- true
...
-- need time to fulfill dead_gap
wait()
---
...
wasted_replica = replicaset_list_wasted()
---
...
table.getn(wasted_replica) == 1
---
- true
...
-- found by law
find_wasted_by_law(wasted_replica[1])
---
- true
...
find_wasted_by_rw(wasted_replica[1])
---
- false
...
find_wasted_by_lar(wasted_replica[1])
---
- false
...
--turn on replication and see empty wasted list
test_run:cmd('switch trim4')
---
- true
...
box.cfg{replication = replication}
---
...
test_run:cmd('switch trim1')
---
- true
...
table.getn(replicaset_list_wasted()) == 0
---
- true
...
-- look at rw_gap
box.cfg{replication_dead_gap = 10, replication_rw_gap = 0.001}
---
...
test_run:cmd('switch trim4')
---
- true
...
box.cfg{replication = {}}
---
...
test_run:cmd('switch trim1')
---
- true
...
wait()
---
...
table.getn(replicaset_list_wasted()) == 1
---
- true
...
find_wasted_by_rw(wasted_replica[1])
---
- true
...
find_wasted_by_law(wasted_replica[1])
---
- false
...
find_wasted_by_lar(wasted_replica[1])
---
- false
...
-- look at lar
test_run:cmd('switch trim4')
---
- true
...
box.cfg{replication = replication}
---
...
test_run:cmd('switch trim1')
---
- true
...
table.getn(replicaset_list_wasted()) == 0
---
- true
...
box.cfg{replication_dead_gap = 0.001, replication_rw_gap = 10}
---
...
test_run:cmd('stop server trim4')
---
- true
...
table.getn(replicaset_list_wasted()) == 0
---
- true
...
wait()
---
...
wasted_replica = replicaset_list_wasted()
---
...
table.getn(wasted_replica)  == 1
---
- true
...
find_wasted_by_lar(wasted_replica[1])
---
- true
...
find_wasted_by_rw(wasted_replica[1])
---
- false
...
find_wasted_by_law(wasted_replica[1])
---
- true
...
-- throw away dead replicas
-- delete given replica
box.space._cluster:len() == 4
---
- true
...
replica_displace(wasted_replica[1])
---
...
box.space._cluster:len() == 3
---
- true
...
-- trim replicaset
test_run:cmd('stop server trim2')
---
- true
...
test_run:cmd('stop server trim3')
---
- true
...
wait()
---
...
trim_set = replicaset_list_wasted()
---
...
table.getn(trim_set) == 2
---
- true
...
replicaset_trim(trim_set)
---
...
box.space._cluster:len() == 1
---
- true
...
-- Cleanup
test_run:cmd('start server trim2')
---
- true
...
test_run:cmd('start server trim3')
---
- true
...
test_run:cmd('start server trim4')
---
- true
...
test_run:cmd('switch default')
---
- true
...
test_run:drop_cluster(SERVERS)
---
...
