env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("create server master with script='replication/master_onctl.lua'")
---
- true
...
test_run:cmd("create server replica with rpl_master=master, script='replication/replica_onctl.lua'")
---
- true
...
test_run:cmd("start server master")
---
- true
...
test_run:cmd("switch master")
---
- true
...
box.schema.user.grant('guest', 'replication')
---
...
SYSTEM_SPACE_CREATE
---
- 18
...
LOCAL_RECOVERY
---
- 1
...
READ_ONLY
---
- 1
...
READ_WRITE
---
- 1
...
-- must be two entries. First from bootstrap.snap, second for current instance.
REPLICASET_ADD
---
- - 1
  - 1
...
-- must be one entry. Deletion of initial tuple in _cluster space.
REPLICASET_REMOVE
---
- - 1
...
REPLICA_CONNECTION_ERROR
---
- []
...
REPLICASET_ADD = {}
---
...
REPLICASET_REMOVE = {}
---
...
new_replica_id = 0
---
...
deleted_replica_id = 0
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function on_ctl_new(ctx)
    if ctx.type == box.ctl.event.REPLICASET_ADD then
        new_replica_id = ctx.replica_id
    elseif ctx.type == box.ctl.event.REPLICASET_REMOVE then
        deleted_replica_id = ctx.replica_id
    end
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
_ = box.ctl.on_ctl_event(on_ctl_new)
---
...
test_run:cmd("start server replica")
---
- true
...
REPLICASET_ADD
---
- - 2
...
REPLICASET_REMOVE
---
- []
...
REPLICA_CONNECTION_ERROR
---
- []
...
new_replica_id
---
- 2
...
deleted_replica_id
---
- 0
...
test_run:cmd("switch replica")
---
- true
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function on_ctl_shutdown(ctx)
    if ctx.type == box.ctl.event.SHUTDOWN then
        require("log").info("test replica shutdown")
    end
end;
---
...
function on_ctl_error(ctx)
    error("trigger error")
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
SYSTEM_SPACE_CREATE
---
- 18
...
LOCAL_RECOVERY
---
- 1
...
READ_ONLY
---
- 1
...
READ_WRITE
---
- 1
...
REPLICASET_ADD
---
- - 2
...
REPLICASET_REMOVE
---
- []
...
box.cfg{read_only = true}
---
...
fiber = require("fiber")
---
...
while READ_ONLY == 0 do fiber.sleep(0.001) end
---
...
READ_ONLY
---
- 2
...
box.cfg{on_ctl_event = on_ctl_error}
---
...
box.cfg{read_only = false}
---
...
test_run:grep_log('replica', 'ctl_trigger error')
---
- ctl_trigger error
...
box.cfg{on_ctl_event = on_ctl_shutdown}
---
...
test_run:cmd("restart server replica")
test_run:grep_log('replica', 'test replica shutdown', 10000, {noreset = true})
---
- test replica shutdown
...
test_run:cmd("switch master")
---
- true
...
REPLICA_CONNECTION_ERROR
---
- - 2
...
box.schema.user.revoke('guest', 'replication')
---
...
_ = box.space._cluster:delete{2}
---
...
SYSTEM_SPACE_CREATE
---
- 18
...
LOCAL_RECOVERY
---
- 1
...
READ_ONLY
---
- 1
...
READ_WRITE
---
- 1
...
REPLICASET_ADD
---
- - 2
...
REPLICASET_REMOVE
---
- - 2
...
new_replica_id
---
- 2
...
deleted_replica_id
---
- 2
...
box.ctl.on_ctl_event(nil, on_ctl_new)
---
...
-- cleanup
test_run:cmd("switch default")
---
- true
...
test_run:cmd("stop server master")
---
- true
...
test_run:cmd("cleanup server master")
---
- true
...
test_run:cmd("stop server replica")
---
- true
...
test_run:cmd("cleanup server replica")
---
- true
...
